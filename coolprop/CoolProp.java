/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class CoolProp {
  public static String get_parameter_information(int key, String info) {
    return CoolPropJNI.get_parameter_information(key, info);
  }

  public static parameters get_parameter_index(String param_name) {
    return parameters.swigToEnum(CoolPropJNI.get_parameter_index(param_name));
  }

  public static boolean is_valid_phase(String phase_name, SWIGTYPE_p_CoolProp__phases iOutput) {
    return CoolPropJNI.is_valid_phase(phase_name, SWIGTYPE_p_CoolProp__phases.getCPtr(iOutput));
  }

  public static phases get_phase_index(String param_name) {
    return phases.swigToEnum(CoolPropJNI.get_phase_index(param_name));
  }

  public static boolean is_trivial_parameter(int key) {
    return CoolPropJNI.is_trivial_parameter(key);
  }

  public static boolean is_valid_parameter(String name, SWIGTYPE_p_CoolProp__parameters iOutput) {
    return CoolPropJNI.is_valid_parameter(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOutput));
  }

  public static boolean is_valid_first_derivative(String name, SWIGTYPE_p_CoolProp__parameters iOf, SWIGTYPE_p_CoolProp__parameters iWrt, SWIGTYPE_p_CoolProp__parameters iConstant) {
    return CoolPropJNI.is_valid_first_derivative(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOf), SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt), SWIGTYPE_p_CoolProp__parameters.getCPtr(iConstant));
  }

  public static boolean is_valid_first_saturation_derivative(String name, SWIGTYPE_p_CoolProp__parameters iOf, SWIGTYPE_p_CoolProp__parameters iWrt) {
    return CoolPropJNI.is_valid_first_saturation_derivative(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOf), SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt));
  }

  public static boolean is_valid_second_derivative(String name, SWIGTYPE_p_CoolProp__parameters iOf1, SWIGTYPE_p_CoolProp__parameters iWrt1, SWIGTYPE_p_CoolProp__parameters iConstant1, SWIGTYPE_p_CoolProp__parameters iWrt2, SWIGTYPE_p_CoolProp__parameters iConstant2) {
    return CoolPropJNI.is_valid_second_derivative(name, SWIGTYPE_p_CoolProp__parameters.getCPtr(iOf1), SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt1), SWIGTYPE_p_CoolProp__parameters.getCPtr(iConstant1), SWIGTYPE_p_CoolProp__parameters.getCPtr(iWrt2), SWIGTYPE_p_CoolProp__parameters.getCPtr(iConstant2));
  }

  public static String get_csv_parameter_list() {
    return CoolPropJNI.get_csv_parameter_list();
  }

  public static boolean match_pair(parameters key1, parameters key2, parameters x1, parameters x2, SWIGTYPE_p_bool swap) {
    return CoolPropJNI.match_pair(key1.swigValue(), key2.swigValue(), x1.swigValue(), x2.swigValue(), SWIGTYPE_p_bool.getCPtr(swap));
  }

  public static input_pairs get_input_pair_index(String input_pair_name) {
    return input_pairs.swigToEnum(CoolPropJNI.get_input_pair_index(input_pair_name));
  }

  public static String get_input_pair_short_desc(input_pairs pair) {
    return CoolPropJNI.get_input_pair_short_desc(pair.swigValue());
  }

  public static String get_input_pair_long_desc(input_pairs pair) {
    return CoolPropJNI.get_input_pair_long_desc(pair.swigValue());
  }

  public static void split_input_pair(input_pairs pair, SWIGTYPE_p_CoolProp__parameters p1, SWIGTYPE_p_CoolProp__parameters p2) {
    CoolPropJNI.split_input_pair(pair.swigValue(), SWIGTYPE_p_CoolProp__parameters.getCPtr(p1), SWIGTYPE_p_CoolProp__parameters.getCPtr(p2));
  }

  public static String get_mixture_binary_pair_data(String CAS1, String CAS2, String param) {
    return CoolPropJNI.get_mixture_binary_pair_data(CAS1, CAS2, param);
  }

  public static void set_mixture_binary_pair_data(String CAS1, String CAS2, String param, double val) {
    CoolPropJNI.set_mixture_binary_pair_data(CAS1, CAS2, param, val);
  }

  public static String get_mixture_binary_pair_pcsaft(String CAS1, String CAS2, String param) {
    return CoolPropJNI.get_mixture_binary_pair_pcsaft(CAS1, CAS2, param);
  }

  public static void set_mixture_binary_pair_pcsaft(String CAS1, String CAS2, String param, double val) {
    CoolPropJNI.set_mixture_binary_pair_pcsaft(CAS1, CAS2, param, val);
  }

  public static void extract_backend_families(String backend_string, SWIGTYPE_p_CoolProp__backend_families f1, SWIGTYPE_p_CoolProp__backend_families f2) {
    CoolPropJNI.extract_backend_families(backend_string, SWIGTYPE_p_CoolProp__backend_families.getCPtr(f1), SWIGTYPE_p_CoolProp__backend_families.getCPtr(f2));
  }

  public static void extract_backend_families_string(String backend_string, SWIGTYPE_p_CoolProp__backend_families f1, SWIGTYPE_p_std__string f2) {
    CoolPropJNI.extract_backend_families_string(backend_string, SWIGTYPE_p_CoolProp__backend_families.getCPtr(f1), SWIGTYPE_p_std__string.getCPtr(f2));
  }

  public static String get_backend_string(backends backend) {
    return CoolPropJNI.get_backend_string(backend.swigValue());
  }

  public static void register_backend(backend_families bf, SWIGTYPE_p_shared_ptrT_CoolProp__AbstractStateGenerator_t gen) {
    CoolPropJNI.register_backend(bf.swigValue(), SWIGTYPE_p_shared_ptrT_CoolProp__AbstractStateGenerator_t.getCPtr(gen));
  }

  public static double Props1SI(String FluidName, String Output) {
    return CoolPropJNI.Props1SI(FluidName, Output);
  }

  public static double PropsSI(String Output, String Name1, double Prop1, String Name2, double Prop2, String FluidName) {
    return CoolPropJNI.PropsSI(Output, Name1, Prop1, Name2, Prop2, FluidName);
  }

  public static VectorOfDoubleVector PropsSImulti(StringVector Outputs, String Name1, DoubleVector Prop1, String Name2, DoubleVector Prop2, String backend, StringVector fluids, DoubleVector fractions) {
    return new VectorOfDoubleVector(CoolPropJNI.PropsSImulti(StringVector.getCPtr(Outputs), Outputs, Name1, DoubleVector.getCPtr(Prop1), Prop1, Name2, DoubleVector.getCPtr(Prop2), Prop2, backend, StringVector.getCPtr(fluids), fluids, DoubleVector.getCPtr(fractions), fractions), true);
  }

  public static int get_debug_level() {
    return CoolPropJNI.get_debug_level();
  }

  public static void set_debug_level(int level) {
    CoolPropJNI.set_debug_level(level);
  }

  public static void set_error_string(String error) {
    CoolPropJNI.set_error_string(error);
  }

  public static void set_warning_string(String warning) {
    CoolPropJNI.set_warning_string(warning);
  }

  public static double saturation_ancillary(String fluid_name, String output, int Q, String input, double value) {
    return CoolPropJNI.saturation_ancillary(fluid_name, output, Q, input, value);
  }

  public static String get_global_param_string(String ParamName) {
    return CoolPropJNI.get_global_param_string(ParamName);
  }

  public static String get_fluid_param_string(String FluidName, String ParamName) {
    return CoolPropJNI.get_fluid_param_string(FluidName, ParamName);
  }

  public static boolean is_valid_fluid_string(String fluidstring) {
    return CoolPropJNI.is_valid_fluid_string(fluidstring);
  }

  public static boolean add_fluids_as_JSON(String backend, String fluidstring) {
    return CoolPropJNI.add_fluids_as_JSON(backend, fluidstring);
  }

  public static void set_reference_stateS(String FluidName, String reference_state) {
    CoolPropJNI.set_reference_stateS(FluidName, reference_state);
  }

  public static void set_reference_stateD(String FluidName, double T, double rhomolar, double hmolar0, double smolar0) {
    CoolPropJNI.set_reference_stateD(FluidName, T, rhomolar, hmolar0, smolar0);
  }

  public static String PhaseSI(String Name1, double Prop1, String Name2, double Prop2, String FluidName) {
    return CoolPropJNI.PhaseSI(Name1, Prop1, Name2, Prop2, FluidName);
  }

  public static void extract_backend(String fluid_string, SWIGTYPE_p_std__string backend, SWIGTYPE_p_std__string fluid) {
    CoolPropJNI.extract_backend(fluid_string, SWIGTYPE_p_std__string.getCPtr(backend), SWIGTYPE_p_std__string.getCPtr(fluid));
  }

  public static String extract_fractions(String fluid_string, DoubleVector fractions) {
    return CoolPropJNI.extract_fractions(fluid_string, DoubleVector.getCPtr(fractions), fractions);
  }

  public static String phase_lookup_string(phases Phase) {
    return CoolPropJNI.phase_lookup_string(Phase.swigValue());
  }

  public static String config_key_to_string(configuration_keys keys) {
    return CoolPropJNI.config_key_to_string(keys.swigValue());
  }

  public static configuration_keys config_string_to_key(String s) {
    return configuration_keys.swigToEnum(CoolPropJNI.config_string_to_key(s));
  }

  public static String config_key_description(configuration_keys keys) {
    return CoolPropJNI.config_key_description__SWIG_0(keys.swigValue());
  }

  public static String config_key_description(String key) {
    return CoolPropJNI.config_key_description__SWIG_1(key);
  }

  public static boolean get_config_bool(configuration_keys key) {
    return CoolPropJNI.get_config_bool(key.swigValue());
  }

  public static int get_config_int(configuration_keys key) {
    return CoolPropJNI.get_config_int(key.swigValue());
  }

  public static double get_config_double(configuration_keys key) {
    return CoolPropJNI.get_config_double(key.swigValue());
  }

  public static String get_config_string(configuration_keys key) {
    return CoolPropJNI.get_config_string(key.swigValue());
  }

  public static String get_config_as_json_string() {
    return CoolPropJNI.get_config_as_json_string();
  }

  public static void set_config_bool(configuration_keys key, boolean val) {
    CoolPropJNI.set_config_bool(key.swigValue(), val);
  }

  public static void set_config_int(configuration_keys key, int val) {
    CoolPropJNI.set_config_int(key.swigValue(), val);
  }

  public static void set_config_double(configuration_keys key, double val) {
    CoolPropJNI.set_config_double(key.swigValue(), val);
  }

  public static void set_config_string(configuration_keys key, String val) {
    CoolPropJNI.set_config_string(key.swigValue(), val);
  }

  public static void set_config_as_json_string(String s) {
    CoolPropJNI.set_config_as_json_string(s);
  }

  public static double HAPropsSI(String OutputName, String Input1Name, double Input1, String Input2Name, double Input2, String Input3Name, double Input3) {
    return CoolPropJNI.HAPropsSI(OutputName, Input1Name, Input1, Input2Name, Input2, Input3Name, Input3);
  }

  public static double HAProps(String OutputName, String Input1Name, double Input1, String Input2Name, double Input2, String Input3Name, double Input3) {
    return CoolPropJNI.HAProps(OutputName, Input1Name, Input1, Input2Name, Input2, Input3Name, Input3);
  }

  public static double HAProps_Aux(String OutputName, double T, double p, double W, String units) {
    return CoolPropJNI.HAProps_Aux(OutputName, T, p, W, units);
  }

  public static double IceProps(String Name, double T, double p) {
    return CoolPropJNI.IceProps(Name, T, p);
  }

  public static void UseVirialCorrelations(int flag) {
    CoolPropJNI.UseVirialCorrelations(flag);
  }

  public static void UseIsothermCompressCorrelation(int flag) {
    CoolPropJNI.UseIsothermCompressCorrelation(flag);
  }

  public static void UseIdealGasEnthalpyCorrelations(int flag) {
    CoolPropJNI.UseIdealGasEnthalpyCorrelations(flag);
  }

  public static void HAHelp() {
    CoolPropJNI.HAHelp();
  }

  public static int returnHumAirCode(String Code) {
    return CoolPropJNI.returnHumAirCode(Code);
  }

  public static double cair_sat(double T) {
    return CoolPropJNI.cair_sat(T);
  }

}
