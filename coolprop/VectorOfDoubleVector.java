/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class VectorOfDoubleVector extends java.util.AbstractList<DoubleVector> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VectorOfDoubleVector(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VectorOfDoubleVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CoolPropJNI.delete_VectorOfDoubleVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public VectorOfDoubleVector(DoubleVector[] initialElements) {
    this();
    reserve(initialElements.length);

    for (DoubleVector element : initialElements) {
      add(element);
    }
  }

  public VectorOfDoubleVector(Iterable<DoubleVector> initialElements) {
    this();
    for (DoubleVector element : initialElements) {
      add(element);
    }
  }

  public DoubleVector get(int index) {
    return doGet(index);
  }

  public DoubleVector set(int index, DoubleVector e) {
    return doSet(index, e);
  }

  public boolean add(DoubleVector e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, DoubleVector e) {
    modCount++;
    doAdd(index, e);
  }

  public DoubleVector remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public VectorOfDoubleVector() {
    this(CoolPropJNI.new_VectorOfDoubleVector__SWIG_0(), true);
  }

  public VectorOfDoubleVector(VectorOfDoubleVector other) {
    this(CoolPropJNI.new_VectorOfDoubleVector__SWIG_1(VectorOfDoubleVector.getCPtr(other), other), true);
  }

  public long capacity() {
    return CoolPropJNI.VectorOfDoubleVector_capacity(swigCPtr, this);
  }

  public void reserve(long n) {
    CoolPropJNI.VectorOfDoubleVector_reserve(swigCPtr, this, n);
  }

  public boolean isEmpty() {
    return CoolPropJNI.VectorOfDoubleVector_isEmpty(swigCPtr, this);
  }

  public void clear() {
    CoolPropJNI.VectorOfDoubleVector_clear(swigCPtr, this);
  }

  public VectorOfDoubleVector(int count, DoubleVector value) {
    this(CoolPropJNI.new_VectorOfDoubleVector__SWIG_2(count, DoubleVector.getCPtr(value), value), true);
  }

  private int doSize() {
    return CoolPropJNI.VectorOfDoubleVector_doSize(swigCPtr, this);
  }

  private void doAdd(DoubleVector x) {
    CoolPropJNI.VectorOfDoubleVector_doAdd__SWIG_0(swigCPtr, this, DoubleVector.getCPtr(x), x);
  }

  private void doAdd(int index, DoubleVector x) {
    CoolPropJNI.VectorOfDoubleVector_doAdd__SWIG_1(swigCPtr, this, index, DoubleVector.getCPtr(x), x);
  }

  private DoubleVector doRemove(int index) {
    return new DoubleVector(CoolPropJNI.VectorOfDoubleVector_doRemove(swigCPtr, this, index), true);
  }

  private DoubleVector doGet(int index) {
    return new DoubleVector(CoolPropJNI.VectorOfDoubleVector_doGet(swigCPtr, this, index), false);
  }

  private DoubleVector doSet(int index, DoubleVector val) {
    return new DoubleVector(CoolPropJNI.VectorOfDoubleVector_doSet(swigCPtr, this, index, DoubleVector.getCPtr(val), val), true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    CoolPropJNI.VectorOfDoubleVector_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
